type User {
  id: ID!
  username: String!
  email: String!
  phoneNumber: String!
  address: String
  role: String!
  createdAt: String!
  isDeleted: Boolean!
}

input CreateUserInput {
  username: String!
  email: String!
  password: String!
  phoneNumber: String!
  address: String
}

input UpdateUserInput {
  id: ID!
  username: String
  email: String
  password: String
  phoneNumber: String
  address: String
}

type Product {
  id: ID!
  name: String!
  description: String
  price: Float!
  owner: User!
  category: Category!
  transactions: [Transaction!]!
}

input CreateProductInput {
  name: String!
  description: String
  price: Float!
  ownerId: ID!
  categoryId: ID!
}

input UpdateProductInput {
  id: ID!
  name: String
  description: String
  price: Float
  categoryId: ID
}

type Category {
  id: ID!
  name: String!
  products: [Product!]!
}

type Transaction {
  id: ID!
  product: Product!
  renter: User!
  startDate: String!
  endDate: String!
  status: String!
}

input CreateTransactionInput {
  productId: ID!
  renterId: ID!
  startDate: String!
  endDate: String!
}

input UpdateTransactionInput {
  id: ID!
  startDate: String
  endDate: String
  status: String
}

type Query {
  # User queries
  getUsers: [User!]!

  # Product queries
  getProducts: [Product!]!
  getProductById(id: ID!): Product

  # Category queries
  getCategories: [Category!]!

  # Transaction queries
  getTransactions: [Transaction!]!
}

type Mutation {
  # User mutations
  createUser(input: CreateUserInput!): User!
  updateUser(input: UpdateUserInput!): User!
  softDeleteUser(id: ID!): Boolean!
  login(email: String!, password: String!): String!

  # Product mutations
  createProduct(input: CreateProductInput!): Product!
  updateProduct(input: UpdateProductInput!): Product!
  deleteProduct(id: ID!): Boolean!

  # Transaction mutations
  createTransaction(input: CreateTransactionInput!): Transaction!
  updateTransaction(input: UpdateTransactionInput!): Transaction!
  deleteTransaction(id: ID!): Boolean!
}